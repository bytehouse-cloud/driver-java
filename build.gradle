plugins {
    id 'java-library'
    id 'checkstyle'
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.sonarqube" version "3.0"
    id "jacoco"
    id "pmd"
    id 'application'
    id 'maven-publish'
    id 'java'
}
java {
    withSourcesJar()
}

application {
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "NULL"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectName", "bytehouse/driver-java"
        property "sonar.projectKey", "bytehouse:driver-java"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL")
        property "sonar.login", System.getenv("SONAR_TOKEN")
    }
}

group 'com.bytedance.bytehouse'
description 'ByteHouse JDBC Driver'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenLocal()
    maven {
        url "https://maven.byted.org/repository/public"
    }
    maven {
        url "https://maven.byted.org/repository/releases"
    }
    maven {
        url "https://maven.byted.org/repository/snapshots"
    }
}
publishing {
    publications {
        myCoolLibrary(MavenPublication) {
            from components.java
        }
    }
}

dependencies {
    implementation "io.airlift:aircompressor:0.18"
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "org.slf4j:slf4j-simple:1.7.30"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.github.RoaringBitmap.RoaringBitmap:RoaringBitmap:0.9.15'
    api "com.bytedance:commons:0.0.14" // consul service discovery

    testImplementation "org.mockito:mockito-core:3.6.28"
    testImplementation "org.junit.jupiter:junit-jupiter:5.7.0"
    testImplementation "com.google.guava:guava:16.0.1"
    testImplementation "org.testcontainers:junit-jupiter:1.15.1"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.20.2'

}

configurations {
    // configuration that holds jars to include in the jar
    implementation {
        canBeResolved = true
    }
}

shadowJar {
    zip64 true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Explicit strategy to exclude duplicates
}

tasks.named("test") {
    environment "CONSUL_HTTP_HOST", "10.231.243.98"
    environment "CONSUL_HTTP_PORT", "2280"
    useJUnitPlatform {}
}

jar {
    from {
        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'examples.CnchQuery'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

checkstyle {
    configFile file("config/checkstyle.xml")
    configProperties 'checkstyle.header.file': file("config/license.header")
}

pmd {
    sourceSets = [sourceSets.main]
    ruleSetFiles = files(
            "./config/pmd/quickstart.xml"
    )
    ruleSets = []
    ignoreFailures = true
}

